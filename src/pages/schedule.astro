---
// src/pages/schedule.astro
import MainLayout from '../layouts/MainLayout.astro';
import Banner from '../components/Banner.astro';
import MeetingCard from '../components/ui/MeetingCard.astro';
import { 
  getAllMeetings, 
  getMeetingsByYear, 
  formatDate, 
  isPastDate,
  MEETING_STATUS
} from '../lib/service/schedule-util.js';

// 기본 상태값 설정
let isLoading = true;
let hasError = false;
let errorMessage = "";
let upcomingMeetings = [];
let pastMeetings = [];

// 년도 설정 (2025년으로 고정)
const targetYear = 2025;

try {
  // 해당 연도의 모임 가져오기 (실제 데이터 우선, 없으면 테스트 데이터)
  console.log(`Fetching meetings for year ${targetYear}...`);
  const yearMeetings = await getMeetingsByYear(targetYear);
  
  // 데이터가 비어있거나 에러가 발생한 경우 테스트 데이터 사용
  if (!yearMeetings || yearMeetings.length === 0 || yearMeetings[0]?.id === 'error') {
    console.log(`No real data found for ${targetYear}, using test data...`);
    upcomingMeetings = await getMeetingsByYear(targetYear, true);
  } else {
    upcomingMeetings = yearMeetings;
  }
  
  // 모든 모임 가져오기 (실제 데이터 우선)
  console.log("Fetching all meetings...");
  const allMeetingsData = await getAllMeetings();
  
  // 데이터가 비어있거나 에러가 발생한 경우 테스트 데이터 사용
  if (!allMeetingsData || allMeetingsData.length === 0 || allMeetingsData[0]?.id === 'error') {
    console.log("No real data found for all meetings, using test data...");
    const testAllMeetings = await getAllMeetings(true);
    
    // 과거 모임 필터링 (2025년이 아닌 과거 모임)
    pastMeetings = testAllMeetings
      .filter(meeting => 
        meeting.status === MEETING_STATUS.COMPLETED && 
        new Date(meeting.date).getFullYear() !== targetYear
      )
      .sort((a, b) => new Date(b.date) - new Date(a.date)); // 최신순으로 정렬
  } else {
    // 과거 모임 필터링 (2025년이 아닌 과거 모임)
    pastMeetings = allMeetingsData
      .filter(meeting => 
        meeting.status === MEETING_STATUS.COMPLETED && 
        new Date(meeting.date).getFullYear() !== targetYear
      )
      .sort((a, b) => new Date(b.date) - new Date(a.date)); // 최신순으로 정렬
  }
  
  // 예정된 모임 날짜 오름차순 정렬
  upcomingMeetings = upcomingMeetings.sort((a, b) => new Date(a.date) - new Date(b.date));
  isLoading = false;
} catch (error) {
  console.error("Error fetching meeting data:", error);
  hasError = true;
  errorMessage = "모임 데이터를 불러오는 중 오류가 발생했습니다. 잠시 후 다시 시도해주세요.";
  isLoading = false;
  
  // 오류 발생 시 테스트 데이터 사용
  try {
    console.log("Falling back to test data...");
    upcomingMeetings = await getMeetingsByYear(targetYear, true);
    const testAllMeetings = await getAllMeetings(true);
    pastMeetings = testAllMeetings
      .filter(meeting => 
        meeting.status === MEETING_STATUS.COMPLETED && 
        new Date(meeting.date).getFullYear() !== targetYear
      )
      .sort((a, b) => new Date(b.date) - new Date(a.date));
    hasError = false; // 테스트 데이터로 복구됨
  } catch (fallbackError) {
    console.error("Error fetching test data:", fallbackError);
    // 테스트 데이터도 실패하면 빈 배열 유지
  }
}
---

<MainLayout title="모임 일정 - 청구회" description="청구회 골프 동호회의 모임 일정 안내" currentPage="schedule">
  <Banner 
    title="모임 일정" 
    subtitle="청구회 골프 동호회의 모든 모임 일정을 확인하세요" 
    bgImage={`${import.meta.env.BASE_URL}images/schedule-banner.jpg`}
  />
  
  <section class="py-16">
    <div class="container mx-auto px-4">
      {isLoading ? (
        <div class="text-center py-20">
          <div class="inline-block animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-primary"></div>
          <p class="mt-4 text-gray-600">모임 일정을 불러오는 중입니다...</p>
        </div>
      ) : hasError ? (
        <div class="text-center py-20">
          <div class="text-red-500 text-4xl mb-4">
            <i class="fas fa-exclamation-circle"></i>
          </div>
          <p class="text-red-500">{errorMessage}</p>
        </div>
      ) : (
        <>
          <div class="mb-16">
            <h2 class="text-3xl font-bold mb-2 text-center bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent">{targetYear}년 모임 일정</h2>
            <div class="title-underline mb-12"></div>
            
            <!-- 추가된 공백 div -->
            <div class="h-12"></div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
              {upcomingMeetings.length > 0 ? upcomingMeetings.map(meeting => (
                <MeetingCard meeting={meeting} />
              )) : (
                <div class="col-span-full text-center py-12">
                  <p class="text-gray-500 text-lg">{targetYear}년 모임 일정이 없습니다.</p>
                </div>
              )}
            </div>
          </div>
          
          <div>
            <h2 class="text-3xl font-bold mb-2 text-center bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent">지난 모임</h2>
            <div class="title-underline mb-12"></div>
            
            <!-- 추가된 공백 div -->
            <div class="h-12"></div>
            
            <div class="overflow-hidden bg-white rounded-lg shadow-md">
              <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                  <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">날짜</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">모임명</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">장소</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">참가자</th>
                  </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                  {pastMeetings.length > 0 ? pastMeetings.map(meeting => (
                    <tr class="hover:bg-gray-50">
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {formatDate(meeting.date)}
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                        {meeting.name}
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {meeting.location}
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {meeting.participants?.length || 0}명
                      </td>
                    </tr>
                  )) : (
                    <tr>
                      <td colspan="4" class="px-6 py-4 text-center text-gray-500">
                        지난 모임 기록이 없습니다.
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </div>
        </>
      )}
    </div>
  </section>
</MainLayout>

<style>
  .title-underline {
    width: 80px;
    height: 4px;
    margin: 0 auto;
    background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
    border-radius: 2px;
  }
</style>